Question 1
==========
We assume that we have an enumerated type:
    var alert: (green, blue, pink, yellow, black, orange)

And we assume that all six possibilities are equally likely.


Case A
------
In the case of the following code:
    if (alert = green) or (alert = pink) or (alert = black) then S else T

We note that, since each case is equally likely, in all the cases where S is reached:
    - 1/6th of the time, only one comparison will be executed
    - 1/6th of the time, 2 comparisons will be executed
    - 1/6th of the time, 3 comparisons will be executed

In addition, for all the cases where T is executed, 3 comparisons will be executed.  As such, we can calculate the average number of comparisons that will be executed:

    avg_compares = (1/6 * 1) + (1/6 * 2) + (1/6 * 3) + (3/6 * 3)
    avg_compares = 2.5

Thus, on average, 2.5 comparisons will be executed.  I also disassembled the corresponding code generated by Free Pascal on an x64 processor, and the code matches what is expected.

Note, however, that, when no optimizations are performed, the "alert" variable must be loaded each time the comparison is executed, resulting in, on average, 2.5 loads, then compares, and then conditional branches.


Case B
------
In the case of the following code:
    if alert in [green, pink, black] then S else T

The code generated by Free Pascal is similar to that of Case A, except that the variable "alert" is loaded exactly once before the execution of the comparison.  In all other manners, the code generated is the same, consisting of three compare/conditional jump pairs, followed by a jump to the other case.  As in Case A, on average 2.5 compares will need to be executed.


Case C
------
In the case of the following code:
    case alert of
        green, pink, black: S;
        blue, yellow, orange: T
    end

Free Pascal generates an interesting selection of compares, in that it compares with the highest value in the range, followed by the next-highest, and so on, decrementing the value that it's testing against in each manner.  Depending on how the case statement is compiled, it could be compiled differently, however.

In the given case, we can determine how many comparisons we need to perform to reach each case:
    - orange        1
    - black         2
    - yellow        3
    - pink          4
    - blue          5
    - green         6

From here, we can determine the average number of branches required to reach the S state by averaging the values for green, pink, and black:

    avg_compares = (6 + 4 + 2) / 3 = 4

Thus, on average, 4 compares need to be executed.

However, if the compiler will implement this code as a jump table, then no compares and only a single indirect jump needs to be executed.


Conclusion
----------

In conclusion, in the cases that I examined, Case B will be the fastest, with a single load and an average of 2.5 comparisons being executed to complete the statement.  However, if Free Pascal (or an alternate compiler) would compile Case C to a jump table, it is possible that it could be the fastest method, taking exactly one load and one indirect jump regardless of the value of "alert".

Other optimizations could include reordering the type to be laid out as such:
    var alert: (green, pink, black, blue, yellow, orange)

And then simply being able to compare a value against 3 (since each case is now split).  A sufficiently intelligent optimizing compiler should be able to perform such an optimization automatically.
